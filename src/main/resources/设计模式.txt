一、设计模式的六大原则：
1、开闭原则：对扩展开放，对修改关闭
2、里氏代换原则(Liskov Substitution Principle LSP)：任何基类可以出现的地方，子类一定可以出现。
LSP是继承复用的基石，只有当前类可以替换到基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生
类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。
里氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：
  a、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
  b、子类中可以增加自己特有的方法。
  c、当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。
  d、当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。
3、依赖倒转原则：是开闭原则的基础，具体内容是：针对接口编程，依赖于抽象而不依赖于具体
4、接口隔离原则：使用多个隔离接口，比使用单个接口要好。（降低类之间的耦合）
5、迪米特法则（最少知道原则）：一个实体应该尽量少的与其他实体之间发生相互作用，使得系统的功能模块相对独立
6、合成复用原则：尽量使用合成/聚合的方式，而不是使用继承
二、代理模式、适配器模式、装饰模式的区别
装饰模式：能动态的新增或组合对象的行为
代理模式：为其他对象提供一种代理以控制对目标对象的访问
适配器模式：是对其他接口的一种转换行为，将接口转换为目标接口，已达到适配的效果。
外观模式：外观对象提供对子系统各元件功能的简化为共同层次的调用接口，它主要起到"简化作用"。
装饰模式是“新增行为”，代理模式是“控制访问行为”，适配器模式是“转换行为”，外观模式是一种“简化行为”
代理模式：
1、代理模式中原类对象与代理类对象接口相同，功能一致
2、起到了隐藏原类的作用
适配器模式：
1、只有适配器继承/持有目标接口
2、将原有类接口转换成目标代码需求的接口
外观模式：
是多个类的集成、统一适配。
装饰者模式：
以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。